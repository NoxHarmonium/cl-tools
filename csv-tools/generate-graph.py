#!/usr/bin/python

# Journey Defs
#						1		2		3		4		5
#----------------------------------------------------------
# Random Walk			1		2		3		4		5	
# DFS					6		7		8		9		10
# Greedy				11		12		13		14		15
# Improved Greedy		16		17		18		19		20
#
# BiDir
#						1		2		3		4		5
#----------------------------------------------------------
# Random Walk			21		22		23		24		25	
# DFS					26		27		28		29		30
# Greedy				31		32		33		34		35
# Improved Greedy		36		37		38		39		40

# 1: Coburg - Ascot Vale
# 2: Reynard / Jamieson St - Grandview Tce/Willsmere Rd 
# 3: South Morang - Frankston
# 4: Barkers Rd/Glenferrie Rd - Parliament
# 5: Flinders/Swanston St - Bourke/Swan st

journeys = {1: 'Short Intersuburban',
			2: 'Medium Intersuburban',
			3: 'Long Intersuburban',
			4: 'Commuter',
			5: 'Inner City'}
types =    {0: 'Random Walk',
			1: 'Random Walk 2',
			2: 'Greedy',
			3: 'Greedy 2'}
		

#Imports
import argparse
import os
import sys
import time
from datetime import date
from types import *


parser = argparse.ArgumentParser(description='Generates a graph file from csv files.')
parser.add_argument('-v', action="store_true",default=False, 			help='show verbose debugging messages.')
parser.add_argument('cols',type=str, default='1,2',
		help='A comma delimited list of column indexes to graph. (default: \'1,2\'')
parser.add_argument('def_file',type=str,
		help='A .def file generated by generate-def.py to define the column names.')
parser.add_argument('destination', type=str, default='./output.gplot',
		help='the file to save the gnuplot definition to. (default: ./output.gplot)')
parser.add_argument('csv_files', type=str, nargs='+', 
		help='a list of csv files to graph.')

#parser.add_argument('-s', dest='skip_lines', nargs='1', #		metavar='lines', default=1, type=int,
#		help='skip n lines at the top of each file. (default: 1 line)')



args = parser.parse_args()

columns = []
if (args.v):
	print('Parsing column numbers...')

splitCols = args.cols.split(',') 
for i in splitCols:
	columns.append(int(i))

if (args.v):
	print('Opening .def file...')

defs = dict()

f = open(args.def_file,'r')
for line in f.read().split('\n'):
	if (line.strip() != ''):	
		d = line.split(',')
		print('Reading def: [{0}: {1}]'.format(d[0],d[1]))
		defs[int(d[0])] = d[1]
f.close()

if (args.v):
	print('Done')

print('Generating graph for columns: {0}...'.format(', '.join(defs[i] for i in columns)))


journeyType = 'undefined'
csvRefs = []

for filename in args.csv_files:
	print('Input file: {0}'.format(filename))
	basename = os.path.basename(filename)
	journeyIndex = int(basename.split('.')[0])

	if (args.v):
		print ('Filename stripped to {0}.'.format(basename))
	
	tJourneyType = journeys[((journeyIndex-1) % 5)+1]
	
	jIndex = int((journeyIndex-1)/5)
	if (args.v):
		print('jIndex: {0}'.format(jIndex))	
	
	optType = types[jIndex%4]
	if (jIndex > 3):
		optType += ' (Bidir)'

	if (args.v):
		print('Journey type: {0}'.format(tJourneyType))
		print('Optimisation type: {0}'.format(optType))

	if (tJourneyType != journeyType):
			if (journeyType == 'undefined'):
				journeyType = tJourneyType
			else:
				raise NameError('The journey types of the supplied csv files do not match.')			

	csvRefs.append({'optType': optType, 'filename': filename })
	


graph =	{
		'title'		: '\'{0} on {1}\''.format(defs[columns[1]], journeyType),
		'xlabel'	: '\'{0}\''.format(defs[columns[0]]),		
		'ylabel'	: '\'{0}\''.format(defs[columns[1]]),
		'terminal'	: 'pdf color',
		'output'	: '\'{0}.pdf\''.format(args.destination),
		'key'		: 'bottom',
		'yrange'	: '[0:1]'
		
	}

if (args.v):
	print ('Writing gnuplot definition to {0}...'.format(args.destination))		

f = open(args.destination,'w')
f.write('# Auto generated by generate-graph.py from \'{0}\'\n'.format(filename))
f.write('# {0}\n'.format(date.today()))
f.write('\n# Parameters:\n')
for param in graph.keys():		
	#if (type(graph[param]) is StringType):
	#	graph[param] = '\'{0}\''.format(graph[param])
	f.write('set {0} {1}\n'.format(param,graph[param]))

f.write('\n#Plots: \n')
i = 0
for ref in csvRefs:
	if (i == 0):
		f.write('plot ')	
	f.write('\"{0}\" using {1}:{2} title \'{3}\' with lines'.format(
			ref['filename'],
			int(splitCols[0])+1,
			int(splitCols[1])+1,
			ref['optType']))
	if (i != (len(csvRefs)-1)):
		f.write(', \\\n')
	i += 1


f.close()

if (args.v):
	print ('Done')



